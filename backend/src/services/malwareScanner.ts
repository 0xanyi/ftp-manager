import fs from 'fs-extra';
import path from 'path';
import logger from '../utils/logger';

export interface MalwareScanResult {
  clean: boolean;
  signature?: string;
  details?: string;
}

const EICAR_SIGNATURE = 'EICAR-STANDARD-ANTIVIRUS-TEST-FILE';

export class MalwareScannerService {
  private readonly enableScan: boolean;

  constructor() {
    const envValue = process.env.ENABLE_MALWARE_SCAN;
    this.enableScan = envValue === undefined ? true : envValue !== 'false';
  }

  /**
   * Indicates if malware scanning is enabled.
   */
  isEnabled(): boolean {
    return this.enableScan;
  }

  /**
   * Performs a basic malware scan on the provided file. This implementation
   * looks for known test signatures (e.g., EICAR) and is intended to be
   * replaced or extended with a production-grade antivirus integration.
   */
  async scanFile(filePath: string, originalName: string): Promise<MalwareScanResult> {
    if (!this.enableScan) {
      return { clean: true };
    }

    try {
      const buffer = await fs.readFile(filePath);
      const fileContent = buffer.toString('utf8');

      if (fileContent.includes(EICAR_SIGNATURE)) {
        logger.warn('Malware signature detected during upload', {
          filePath,
          originalName,
        });
        return {
          clean: false,
          signature: 'EICAR',
          details: 'Detected EICAR test signature',
        };
      }

      // Additional lightweight heuristics could be added here (e.g., file type anomalies)

      return { clean: true };
    } catch (error) {
      logger.error('Failed to scan file for malware', {
        error,
        filePath,
        originalName,
      });

      return {
        clean: false,
        signature: 'SCAN_ERROR',
        details: 'Unable to complete malware scan',
      };
    }
  }

  /**
   * Helper to create a human-readable report path.
   */
  getReportName(originalName: string): string {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const baseName = path.basename(originalName);
    return `${timestamp}_${baseName}.scan.json`;
  }
}

const malwareScanner = new MalwareScannerService();

export default malwareScanner;
