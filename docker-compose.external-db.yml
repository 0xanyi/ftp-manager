version: '3.8'

# =============================================================================
# TOOVYDROP - COOLIFY DEPLOYMENT WITH EXTERNAL DATABASES
# =============================================================================
# This configuration assumes PostgreSQL and Redis are running as external
# services (e.g., managed database services, separate servers, or Coolify
# database services created independently).
# =============================================================================

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - VITE_API_URL=${SERVICE_URL_BACKEND}
        - VITE_WS_URL=${SERVICE_URL_BACKEND_WS}
    labels:
      # Coolify Management Labels
      - coolify.managed=true
      - coolify.type=application
      # Traefik Proxy Configuration
      - traefik.enable=true
      - traefik.http.routers.toovydrop-frontend.rule=Host(`${SERVICE_FQDN_TOOVYDROP}`)
      - traefik.http.routers.toovydrop-frontend.entryPoints=http,https
      - traefik.http.routers.toovydrop-frontend.tls=true
      - traefik.http.routers.toovydrop-frontend.tls.certresolver=letsencrypt
      - traefik.http.services.toovydrop-frontend.loadbalancer.server.port=80
    environment:
      - SERVICE_FQDN_TOOVYDROP=${SERVICE_FQDN_TOOVYDROP}
      - VITE_API_URL=${SERVICE_URL_BACKEND}
      - VITE_WS_URL=${SERVICE_URL_BACKEND_WS}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - coolify

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    labels:
      # Coolify Management Labels
      - coolify.managed=true
      - coolify.type=application
      # Traefik Proxy Configuration for API
      - traefik.enable=true
      - traefik.http.routers.toovydrop-backend.rule=Host(`${SERVICE_FQDN_TOOVYDROP}`) && PathPrefix(`/api`)
      - traefik.http.routers.toovydrop-backend.entryPoints=http,https
      - traefik.http.routers.toovydrop-backend.tls=true
      - traefik.http.routers.toovydrop-backend.tls.certresolver=letsencrypt
      - traefik.http.services.toovydrop-backend.loadbalancer.server.port=3000
    environment:
      # Application Environment
      - NODE_ENV=production
      - PORT=3000
      - SERVICE_FQDN_BACKEND=${SERVICE_FQDN_TOOVYDROP}/api
      - SERVICE_URL_BACKEND=${SERVICE_URL_BACKEND}
      - SERVICE_URL_BACKEND_WS=${SERVICE_URL_BACKEND_WS}
      
      # Database Configuration (External PostgreSQL Service)
      - DATABASE_URL=${DATABASE_URL}
      
      # JWT Secrets
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_ACCESS_EXPIRY=${JWT_ACCESS_EXPIRY:-15m}
      - JWT_REFRESH_EXPIRY=${JWT_REFRESH_EXPIRY:-7d}
      
      # Redis Configuration (External Redis Service)
      - REDIS_URL=${REDIS_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # FTP Configuration
      - FTP_HOST=${FTP_HOST}
      - FTP_PORT=${FTP_PORT:-21}
      - FTP_USER=${FTP_USER}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - FTP_SECURE=${FTP_SECURE:-false}
      - FTP_REJECT_UNAUTHORIZED=${FTP_REJECT_UNAUTHORIZED:-true}
      
      # File Upload Settings
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5368709120}
      - CHUNK_SIZE=${CHUNK_SIZE:-5242880}
      - UPLOAD_DIR=/app/uploads
      - TEMP_DIR=/app/uploads/temp
      
      # Security Settings
      - ENABLE_MALWARE_SCAN=${ENABLE_MALWARE_SCAN:-true}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FILE=/app/logs/app.log
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    # External database services - no container dependencies needed
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coolify

volumes:
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  coolify:
    external: true